{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#loading-lua-scripts","title":"Loading Lua scripts","text":"<ol> <li>Drop script into <code>Counter-Strike Global Offensive\\game\\bin\\win64\\nix\\scripts</code> folder.</li> <li>Select the script from list and press \"Load\".</li> </ol>"},{"location":"cvars/","title":"cvars","text":""},{"location":"cvars/#getting-convars","title":"Getting convars","text":"<p>You can do this by <code>cvars.CONVAR_NAME</code> <pre><code>print(\"Current sensitivity:\" .. cvars.sensitivity:get_float())\n</code></pre> Return type is <code>convar_t</code></p>"},{"location":"engine/","title":"engine","text":""},{"location":"engine/#execute_client_cmd","title":"execute_client_cmd","text":"<p><code>engine.execute_client_cmd(command: string)</code> </p> Name Type Description command <code>string</code> Command to execute Example <pre><code>register_callback(\"player_death\", function(event)\n    if event:get_pawn(\"attacker\") == entitylist.get_local_player_pawn() then \n        engine.execute_client_cmd(\"say 1\")\n    end\nend)\n</code></pre>"},{"location":"engine/#play_sound","title":"play_sound","text":"<p><code>engine.play_sound(sound_name: string, volume: string)</code> </p> Name Type Description sound_name <code>string</code> Sound name volume <code>string</code> Volume"},{"location":"engine/#chat_print","title":"chat_print","text":"<p><code>engine.chat_print(text: string)</code> </p> Name Type Description text <code>string</code> Text to print"},{"location":"engine/#get_level_name","title":"get_level_name","text":"<p><code>engine.get_level_name()</code> </p>"},{"location":"engine/#get_netvar_offset","title":"get_netvar_offset","text":"<p><code>engine.get_netvar_offset(module_name: string, table_name: string, prop_name: string):</code> <code>number</code> </p> Name Type Description module_name <code>string</code> Module name table_name <code>string</code> Name of the table prop_name <code>string</code> Name of the property"},{"location":"entitylist/","title":"entitylist","text":""},{"location":"entitylist/#get_local_player_controller","title":"get_local_player_controller","text":"<p><code>entitylist.get_local_player_controller():</code> <code>base_entity_t</code> </p>"},{"location":"entitylist/#get_local_player_pawn","title":"get_local_player_pawn","text":"<p><code>entitylist.get_local_player_pawn():</code> <code>base_entity_t</code> </p>"},{"location":"entitylist/#get_entity_from_handle","title":"get_entity_from_handle","text":"<p><code>entitylist.get_entity_from_handle(handle: number):</code> <code>base_entity_t</code> </p> Name Type Description handle <code>number</code> Handle of the entity"},{"location":"entitylist/#get_entities","title":"get_entities","text":"Return styleCallback style <p><code>entitylist.get_entities(class_name?: string):</code> <code>base_entity_t[]</code> </p> Name Type Description class_name <code>string</code> Optional. Name of the class. <p><code>entitylist.get_entities(class_name?: string, callback: function)</code> </p> Name Type Description class_name <code>string</code> Optional. Name of the class. callback <code>function</code> Callback function, that receives <code>base_entity_t</code> as an argument <pre><code>entitylist.get_entities(\"C_CSPlayerPawn\", function(entity)\n    -- loop through all players\nend)\n</code></pre>"},{"location":"environment/","title":"environment","text":"<p>Info</p> <p>This page describes only overridden and custom functions. Other functions of the standard Lua environment haven't been changed in any aspect</p>"},{"location":"environment/#register_callback","title":"register_callback","text":"<p><code>register_callback(name: string, func: function)</code> </p> Name Type Description name <code>string</code> Event name. Look here for event list func <code>function</code> Callback function"},{"location":"environment/#find_pattern","title":"find_pattern","text":"<p><code>find_pattern(module: string, pattern: string, offset?: number):</code> <code>userdata</code> </p> Name Type Description module <code>string</code> Module name to search the pattern in pattern <code>string</code> IDA style pattern to search for. Wildcard - <code>?</code> offset <code>number</code> Optional. Offset in bytes which will be added to the pointer <p>Warning</p> <p>If pattern is not found, return value will be <code>nil</code></p>"},{"location":"environment/#get_user_name","title":"get_user_name","text":"<p><code>get_user_name():</code> <code>string</code> </p>"},{"location":"environment/#get_script_name","title":"get_script_name","text":"<p><code>get_script_name():</code> <code>string</code> </p>"},{"location":"environment/#unload_script","title":"unload_script","text":"<p><code>unload_script()</code> </p>"},{"location":"environment/#print","title":"print","text":"<p><code>print(text: string, color?: color_t)</code> </p> Name Type Description text <code>string</code> Text to print color <code>color_t</code> Optional. Text color <p>Info</p> <p>You can put <code>\\0</code> in the end of the text to prevent newline</p>"},{"location":"events/","title":"events","text":""},{"location":"events/#paint","title":"paint","text":"<p><code>paint()</code> </p>"},{"location":"events/#game_event","title":"game_event","text":"<p><code>game_event(event: game_event_t)</code> </p> Name Type Description event <code>game_event_t</code> Game event"},{"location":"events/#unload","title":"unload","text":"<p><code>unload()</code> </p>"},{"location":"render/","title":"render","text":""},{"location":"render/#functions","title":"Functions","text":""},{"location":"render/#screen_size","title":"screen_size","text":"<p><code>render.screen_size():</code> <code>vec2_t</code> </p>"},{"location":"render/#frame_count","title":"frame_count","text":"<p><code>render.frame_count():</code> <code>number</code> </p>"},{"location":"render/#frame_time","title":"frame_time","text":"<p><code>render.frame_time():</code> <code>number</code> </p>"},{"location":"render/#setup_texture","title":"setup_texture","text":"<p><code>render.setup_texture(filename: string):</code> <code>texture_t</code> </p> Name Type Description filename <code>string</code> Path to the texture <p>Warning</p> <p>If you specify a texture that does not exist, return value will be <code>nil</code>.</p> Example <pre><code>local texture = render.setup_texture(\"C:/example.png\")\nregister_callback(\"paint\", function()\n    render.texture(texture, vec2_t(100, 100), vec2_t(200, 200))\nend)\n</code></pre>"},{"location":"render/#setup_font","title":"setup_font","text":"<p><code>render.setup_font(filename: string, size: number, flags?: number):</code> <code>font_t</code> </p> Name Type Description filename <code>string</code> Path to the font size <code>number</code> Font size flags <code>number</code> Optional. Font flags <p>Warning</p> <p>If you specify a font that does not exist, return value will be <code>nil</code>.</p> Example <pre><code>local font = render.setup_font(\"C:/Windows/Fonts/verdana.ttf\", 32, 0)\nregister_callback(\"paint\", function()\n    render.text(\"hello from lua api!\", font, vec2_t(100, 100), color_t(1, 1, 1, 1))\nend)\n</code></pre>"},{"location":"render/#calc_text_size","title":"calc_text_size","text":"<p><code>render.calc_text_size(text: string, font: font_t, size?: number):</code> <code>vec2_t</code> </p> Name Type Description text <code>string</code> Text size of which will be calculated font <code>font_t</code> Font object size <code>number</code> Optional. Font size <p>Warning</p> <p>If you specify a font that does not exist, return value will be <code>nil</code>.</p>"},{"location":"render/#world_to_screen","title":"world_to_screen","text":"<p><code>render.world_to_screen(pos: vec3_t):</code> <code>vec3_t</code> </p> Name Type Description pos <code>vec3_t</code> World position <p>Warning</p> <p>If world position is not on the screen, return value will be <code>nil</code>.</p> Example <pre><code>register_callback(\"paint\", function()\n    local w2s = render.world_to_screen(vec3_t(0, 0, 0))\n    if w2s then\n        render.circle_fade(w2s, 20, color_t(1, 0.25, 0.25, 0.5), color_t(0, 0, 0, 1))\n    end\nend)\n</code></pre>"},{"location":"render/#draw-functions","title":"Draw functions","text":""},{"location":"render/#texture","title":"texture","text":"<p><code>render.texture(texture: texture_t, from: vec2_t, to: vec2_t, color?: color_t)</code> </p> Name Type Description texture <code>texture_t</code> Texture object from <code>vec2_t</code> Start position of the texture to <code>vec2_t</code> End position of the texture color <code>color_t</code> Optional. Texture color"},{"location":"render/#text","title":"text","text":"<p><code>render.text(text: string, font: font_t, pos: vec2_t, color?: color_t, size?: number)</code> </p> Name Type Description text <code>string</code> Text to render font <code>font_t</code> Font object, or <code>0</code> = default font, or <code>1</code> = pixel font pos <code>vec2_t</code> Position of where text will be rendered color <code>color_t</code> Optional. Text color size <code>number</code> Optional. Text size"},{"location":"render/#line","title":"line","text":"<p><code>render.line(from: vec2_t, to: vec2_t, color: color_t, thickness?: number)</code> </p> Name Type Description from <code>vec2_t</code> Start position of the line to <code>vec2_t</code> End position of the line color <code>color_t</code> Color of the line thickness <code>number</code> Optional. Thickness of the line"},{"location":"render/#rect","title":"rect","text":"<p><code>render.rect(from: vec2_t, to: vec2_t, color: color_t, rounding?: number, thickness?: number)</code> </p> Name Type Description from <code>vec2_t</code> Start position of the rectangle to <code>vec2_t</code> End position of the rectangle color <code>color_t</code> Color of the rectangle rounding <code>number</code> Optional. Rounding of the rectangle thickness <code>number</code> Optional. Thickness of the rectangle"},{"location":"render/#rect_filled","title":"rect_filled","text":"<p><code>render.rect_filled(from: vec2_t, to: vec2_t, color: color_t, rounding?: number)</code> </p> Name Type Description from <code>vec2_t</code> Start position of a rectangle to <code>vec2_t</code> End position of the rectangle color <code>color_t</code> Color of the rectangle rounding <code>number</code> Optional. Rounding of the rectangle"},{"location":"render/#rect_filled_fade","title":"rect_filled_fade","text":"<p><code>render.rect_filled_fade(from: vec2_t, to: vec2_t, col_upr_left: color_t, col_upr_right: color_t, col_bot_right: color_t, col_bot_left: color_t)</code> </p> Name Type Description from <code>vec2_t</code> Start position of a rectangle to <code>vec2_t</code> Font object col_upr_left <code>color_t</code> Color of the top left corner col_upr_right <code>color_t</code> Color of the top right corner col_bot_right <code>color_t</code> Color of the bottom right corner col_bot_left <code>color_t</code> Color of the bottom left corner"},{"location":"render/#circle","title":"circle","text":"<p><code>render.circle(pos: vec2_t, radius: number, segments: number, color: color_t, thickness?: number)</code> </p> Name Type Description pos <code>vec2_t</code> Position of the circle radius <code>number</code> Radius of the circle segments <code>number</code> Count of the circle segments color <code>color_t</code> Color of the circle thickness <code>number</code> Optional. Thickness of the circle"},{"location":"render/#circle_filled","title":"circle_filled","text":"<p><code>render.circle_filled(pos: vec2_t, radius: number, segments: number, color: color_t)</code> </p> Name Type Description pos <code>vec2_t</code> Position of the circle radius <code>number</code> Radius of the circle segments <code>number</code> Count of the circle segments color <code>color_t</code> Color of the circle"},{"location":"render/#circle_fade","title":"circle_fade","text":"<p><code>render.circle_fade(pos: vec2_t, radius: number, color_in: color_t, color_out: color_t)</code> </p> Name Type Description pos <code>vec2_t</code> Position of the circle radius <code>number</code> Radius of the circle color_in <code>color_t</code> Color of the center of the circle color_out <code>color_t</code> Color of the edge of the circle"},{"location":"render/#filled_polygon","title":"filled_polygon","text":"<p><code>render.filled_polygon(points: vec2_t[], color: color_t)</code> </p> Name Type Description points <code>vec2_t[]</code> Array of screen positions color <code>color_t</code> Color of the polygon"},{"location":"render/#poly_line","title":"poly_line","text":"<p><code>render.poly_line(points: vec2_t[], color: color_t)</code> </p> Name Type Description points <code>vec2_t[]</code> Array of screen positions color <code>color_t</code> Color of the polyline"},{"location":"render/#push_clip_rect","title":"push_clip_rect","text":"<p><code>render.push_clip_rect(from: vec2_t, to: vec2_t, intersect_with_current_clip_rect?: boolean)</code> </p> Name Type Description from <code>vec2_t</code> Start position of the clip rect to <code>vec2_t</code> End position of the clip rect intersect_with_current_clip_rect <code>boolean</code> Optional. Allow intersections with other clips"},{"location":"render/#pop_clip_rect","title":"pop_clip_rect","text":"<p><code>render.pop_clip_rect()</code> </p>"},{"location":"render/#world-draw-functions","title":"World draw functions","text":""},{"location":"render/#circle_3d","title":"circle_3d","text":"<p><code>render.circle_3d(pos: vec3_t, radius: number, color: color_t, thickness?: number, normal?: vec3_t)</code> </p> Name Type Description pos <code>vec3_t</code> Position of the circle radius <code>number</code> Radius of the circle color <code>color_t</code> Color of the circle thickness <code>number</code> Optional. Thickness of the circle normal <code>vec3_t</code> Optional. Rotation of the circle"},{"location":"render/#circle_filled_3d","title":"circle_filled_3d","text":"<p><code>render.circle_filled_3d(pos: vec3_t, radius: number, color: color_t, normal?: vec3_t)</code> </p> Name Type Description pos <code>vec3_t</code> Position of the circle radius <code>number</code> Radius of the circle color <code>color_t</code> Color of the circle normal <code>vec3_t</code> Optional. Rotation of the circle"},{"location":"render/#circle_fade_3d","title":"circle_fade_3d","text":"<p><code>render.circle_fade_3d(pos: vec3_t, radius: number, color_in: color_t, color_out: color_t, normal?: vec3_t)</code> </p> Name Type Description pos <code>vec3_t</code> Position of the circle radius <code>number</code> Radius of the circle color_in <code>color_t</code> Color of the center of the circle color_out <code>color_t</code> Color of the edge of the circle normal <code>vec3_t</code> Optional. Rotation of the circle"},{"location":"types/angle_t/","title":"angle_t","text":"Name Type pitch <code>number</code> yaw <code>number</code> roll <code>number</code>"},{"location":"types/base_entity_t/","title":"base_entity_t","text":""},{"location":"types/base_entity_t/#entity-functions","title":"Entity functions","text":""},{"location":"types/base_entity_t/#get_class_name","title":"get_class_name","text":"<p><code>entity:get_class_name():</code> <code>string</code> </p>"},{"location":"types/base_entity_t/#get_entity_handle","title":"get_entity_handle","text":"<p><code>entity:get_entity_handle():</code> <code>number</code> </p>"},{"location":"types/base_entity_t/#getting-ffi-pointer","title":"Getting FFI pointer","text":"<p>To get entity pointer you can use <code>entity[0]</code> Also you can use <code>entity[OFFSET]</code> to get the address pointing to specified offset of the entity Hexadecimal and decimal number are both supported</p> <p>Example</p> <p>This example will print local player health <pre><code>local offset = engine.get_netvar_offset(\"client.dll\", \"C_BaseEntity\", \"m_iHealth\")\nlocal pawn = entitylist.get_local_player_pawn()\nif pawn ~= nil then\n    print(\"Localplayer HP: \" .. ffi.cast(\"int*\", pawn[offset])[0])\nend\n</code></pre></p>"},{"location":"types/base_entity_t/#using-netvars","title":"Using netvars","text":"<p>Example</p> <pre><code>local font = render.setup_font(\"C:/Windows/Fonts/verdana.ttf\", 32, 0)\nregister_callback(\"paint\", function()\n    local pawn = entitylist.get_local_player_pawn()\n    if pawn == nil then return end\n\n    local game_scene_node = pawn.m_pGameSceneNode\n    if game_scene_node == nil then return end\n\n    local weapon_services = pawn.m_pWeaponServices\n    if weapon_services == nil then return end\n\n    local weapon = weapon_services.m_hActiveWeapon\n    if weapon == nil then return end\n\n    if weapon.m_bInReload then\n        local origin2 = render.world_to_screen(game_scene_node.m_vecAbsOrigin)\n        if origin2 ~= nil then\n            render.text(\"reloading\", font, origin2, color_t(1, 1, 1, 1))\n        end\n    end\nend)\n</code></pre>"},{"location":"types/color_t/","title":"color_t","text":"Name Type r <code>number</code> g <code>number</code> b <code>number</code> a <code>number</code>"},{"location":"types/color_t/#functions","title":"Functions","text":""},{"location":"types/color_t/#lerp","title":"lerp","text":"<p><code>color:lerp(other: color_t, fraction: number):</code> <code>color_t</code> </p> Name Type Description other <code>color_t</code> Other color fraction <code>number</code> Fraction"},{"location":"types/convar_t/","title":"convar_t","text":""},{"location":"types/convar_t/#getters","title":"Getters","text":""},{"location":"types/convar_t/#get_name","title":"get_name","text":"<p><code>convar:get_name():</code> <code>string</code> </p>"},{"location":"types/convar_t/#get_desc","title":"get_desc","text":"<p><code>convar:get_desc():</code> <code>string</code> </p>"},{"location":"types/convar_t/#get_bool","title":"get_bool","text":"<p><code>convar:get_bool():</code> <code>boolean</code> </p>"},{"location":"types/convar_t/#get_int","title":"get_int","text":"<p><code>convar:get_int():</code> <code>number</code> </p>"},{"location":"types/convar_t/#get_float","title":"get_float","text":"<p><code>convar:get_float():</code> <code>number</code> </p>"},{"location":"types/convar_t/#get_string","title":"get_string","text":"<p><code>convar:get_string():</code> <code>string</code> </p>"},{"location":"types/game_event_t/","title":"game_event_t","text":""},{"location":"types/game_event_t/#getters","title":"Getters","text":""},{"location":"types/game_event_t/#get_name","title":"get_name","text":"<p><code>event:get_name():</code> <code>string</code> </p>"},{"location":"types/game_event_t/#get_int","title":"get_int","text":"<p><code>event:get_int(key_name: string):</code> <code>number</code> </p> Name Type Description key_name <code>string</code> Key name"},{"location":"types/game_event_t/#get_float","title":"get_float","text":"<p><code>event:get_float(key_name: string):</code> <code>number</code> </p> Name Type Description key_name <code>string</code> Key name"},{"location":"types/game_event_t/#get_string","title":"get_string","text":"<p><code>event:get_string(key_name: string):</code> <code>string</code> </p> Name Type Description key_name <code>string</code> Key name"},{"location":"types/game_event_t/#get_pawn","title":"get_pawn","text":"<p><code>event:get_pawn(key_name: string):</code> <code>base_entity_t</code> </p> Name Type Description key_name <code>string</code> Key name"},{"location":"types/game_event_t/#get_controller","title":"get_controller","text":"<p><code>event:get_controller(key_name: string):</code> <code>base_entity_t</code> </p> Name Type Description key_name <code>string</code> Key name"},{"location":"types/game_event_t/#setters","title":"Setters","text":""},{"location":"types/game_event_t/#set_int","title":"set_int","text":"<p><code>event:set_int(key_name: string, value: number)</code> </p> Name Type Description key_name <code>string</code> Key name value <code>number</code> Value"},{"location":"types/game_event_t/#set_float","title":"set_float","text":"<p><code>event:set_float(key_name: string, value: number)</code> </p> Name Type Description key_name <code>string</code> Key name value <code>number</code> Value"},{"location":"types/game_event_t/#set_string","title":"set_string","text":"<p><code>event:set_string(key_name: string, value: string)</code> </p> Name Type Description key_name <code>string</code> Key name value <code>string</code> Value"},{"location":"types/vec2_t/","title":"vec2_t","text":"Name Type x <code>number</code> y <code>number</code>"},{"location":"types/vec3_t/","title":"vec3_t","text":"Name Type x <code>number</code> y <code>number</code> z <code>number</code>"},{"location":"types/vec3_t/#functions","title":"Functions","text":""},{"location":"types/vec3_t/#length_2d","title":"length_2d","text":"<p><code>vec3:length_2d():</code> <code>number</code> </p>"},{"location":"types/vec3_t/#length","title":"length","text":"<p><code>vec3:length():</code> <code>number</code> </p>"},{"location":"types/vec3_t/#length_2d_sqr","title":"length_2d_sqr","text":"<p><code>vec3:length_2d_sqr():</code> <code>number</code> </p>"},{"location":"types/vec3_t/#length_sqr","title":"length_sqr","text":"<p><code>vec3:length_sqr():</code> <code>number</code> </p>"},{"location":"types/vec3_t/#dist_to_2d","title":"dist_to_2d","text":"<p><code>vec3:dist_to_2d(other: vec3_t):</code> <code>number</code> </p> Name Type Description other <code>vec3_t</code> Other vector"},{"location":"types/vec3_t/#dist_to","title":"dist_to","text":"<p><code>vec3:dist_to(other: vec3_t):</code> <code>number</code> </p> Name Type Description other <code>vec3_t</code> Other vector"},{"location":"types/vec3_t/#dot","title":"dot","text":"<p><code>vec3:dot(other: vec3_t):</code> <code>number</code> </p> Name Type Description other <code>vec3_t</code> Other vector"},{"location":"types/vec3_t/#cross","title":"cross","text":"<p><code>vec3:cross(other: vec3_t):</code> <code>vec3_t</code> </p> Name Type Description other <code>vec3_t</code> Other vector"},{"location":"types/vec3_t/#normalized","title":"normalized","text":"<p><code>vec3:normalized():</code> <code>vec3_t</code> </p>"},{"location":"types/vec3_t/#normalize","title":"normalize","text":"<p><code>vec3:normalize():</code> <code>number</code> </p>"},{"location":"types/vec4_t/","title":"vec4_t","text":"Name Type x <code>number</code> y <code>number</code> z <code>number</code> w <code>number</code>"}]}